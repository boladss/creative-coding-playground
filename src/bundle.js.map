{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/arcs.ts","webpack:///./src/boids.ts","webpack:///./src/helper.ts","webpack:///./src/nodes.ts","webpack:///./src/script.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["import { colorA, colorB } from \"./script\"\r\nimport { degToRad } from \"./helper\";\r\n// import { getRandomInt, degToRad } from \"./helper\";\r\n\r\n// Classes\r\nclass Vector {\r\n  constructor(\r\n    public x: number,\r\n    public y: number\r\n  ) {}\r\n}\r\n\r\nclass Segment {\r\n  constructor(\r\n    public position: Vector,\r\n    private speed: number,\r\n    private angle: number,\r\n    private width: number,\r\n    private height: number,\r\n    private label: number,\r\n  ) {}\r\n\r\n  update(center: Vector, radius: number): void {\r\n    this.angle += this.speed;\r\n    // this.position = getPosition(center, radius, this.angle);\r\n    // if (this.label === 50) console.log(this.label, this.position.x, this.position.y, this.angle);\r\n  }\r\n\r\n  draw(context: CanvasRenderingContext2D): void {\r\n    context.fillStyle = colorA;\r\n\r\n    // if (this.label === 50) context.fillStyle = 'red';\r\n    context.save();\r\n    context.translate(this.position.x, this.position.y);\r\n    context.rotate(-this.angle);\r\n\r\n    context.beginPath();\r\n    context.rect(-this.width*0.5, -this.height*0.5, this.width, this.height);\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n}\r\n\r\n// Helper functions\r\nfunction getPosition(center: Vector, radius: number, angle: number): Vector {\r\n  const x = center.x + radius * Math.sin(angle);\r\n  const y = center.y + radius * Math.cos(angle);\r\n\r\n  return new Vector(x, y);\r\n}\r\n\r\n// Main\r\nexport default function initArcs(context: CanvasRenderingContext2D, width: number, height: number): void {\r\n  const segments1: Segment[] = [];\r\n  const segments2: Segment[] = [];\r\n  const count = 75;\r\n  const speed = 0.005;\r\n  const flag = true;\r\n\r\n  const center = new Vector(width*0.5, width*0.5);\r\n\r\n  const w = 5;\r\n  const h = height * 2;\r\n  const radius = width * 0.25;\r\n\r\n  const generateSegments = (segments: Segment[], direction: number) => {\r\n    for (let i = 0; i < count; i++) {\r\n      const slice = degToRad(360/count);\r\n      const angle = slice * i;\r\n  \r\n      const position = getPosition(center, radius, angle);\r\n  \r\n      // const wScaled = w * getRandom(0.1, 1);\r\n      const wScaled = w*0.25;\r\n\r\n      const velocity = direction * speed;\r\n\r\n      segments.push(new Segment(position, velocity, angle, wScaled, h, i));\r\n    }\r\n  };\r\n\r\n  generateSegments(segments1, 1);\r\n  // if (flag) generateSegments(segments2, -1);\r\n\r\n  const animate = () => {\r\n    context.fillStyle = colorB;\r\n    context.fillRect(0, 0, width, height);\r\n  \r\n    segments1.forEach(segment => {\r\n      segment.update(center, radius);\r\n      segment.draw(context);\r\n    })\r\n\r\n    if (flag) segments2.forEach(segment => {\r\n      segment.update(center, radius);\r\n      segment.draw(context);\r\n    })\r\n  \r\n    const fps = 60;\r\n    const fpsInterval = 1000/fps;\r\n  \r\n    setTimeout(() => {\r\n      window.requestAnimationFrame(animate);\r\n    }, fpsInterval);\r\n  };\r\n\r\n  animate();\r\n}","import { getRandomInt } from \"./helper\"\r\nimport { colorA, colorB } from \"./script\"\r\n\r\n// Classes\r\nclass Vector {\r\n  constructor(\r\n    public x: number,\r\n    public y: number\r\n  ) {}\r\n\r\n  add(vec: Vector): void {\r\n    this.x += vec.x;\r\n    this.y += vec.y;\r\n  }\r\n\r\n  sub(vec: Vector): void {\r\n    this.x -= vec.x;\r\n    this.y -= vec.y;\r\n  }\r\n\r\n  mul(k: number): void {\r\n    this.x *= k;\r\n    this.y *= k;\r\n  }\r\n\r\n  div(k: number): void {\r\n    this.x /= k;\r\n    this.y /= k;\r\n  }\r\n\r\n  limit(max: number): void {\r\n    if (this.x >= max) this.x = max;\r\n    if (this.x <= -max) this.x = -max;\r\n    if (this.y >= max) this.y = max\r\n    if (this.y <= -max) this.y = -max\r\n  }\r\n\r\n  getDistance(other: Vector): number {\r\n    const dx = this.x - other.x;\r\n    const dy = this.y - other.y;\r\n    return Math.sqrt(dx*dx + dy*dy);\r\n  }\r\n}\r\n\r\nclass Boid {\r\n  private radius: number;\r\n\r\n  constructor(\r\n    public position: Vector,\r\n    private velocity: Vector,\r\n    private acceleration: Vector,\r\n    private label: number,\r\n  ) {this.radius = 5;}\r\n\r\n  static default(width: number, height: number, label?: number): Boid {\r\n    const position = new Vector(getRandomInt(0, width), getRandomInt(0, height));\r\n    const velocity = new Vector(getRandomInt(-1, 1), getRandomInt(-1, 1));\r\n    const acceleration = new Vector(0, 0);\r\n    if (label == null) label = 0;\r\n\r\n    return new Boid(position, velocity, acceleration, label);\r\n  }\r\n  \r\n  getNeighboids(boids: Boid[], radius: number): Boid[] {\r\n    const neighboids: Boid[] = [];\r\n    for (const boid of boids) {\r\n      if (this.position.getDistance(boid.position) < radius) neighboids.push(boid);\r\n    }\r\n    return neighboids;\r\n  }\r\n  \r\n  checkVisible(distance: number): boolean {\r\n    return distance <= 100;\r\n  }\r\n\r\n  tooClose(distance: number): boolean {\r\n    return distance <= 20;\r\n  }\r\n\r\n  alignment(neighboids: Boid[]): Vector {\r\n    let target: Vector = new Vector(0,0);\r\n    \r\n    if (neighboids.length > 0) {\r\n      for (const boid of neighboids) {\r\n        // if (this.position.x === boid.position.x && this.position.y === boid.position.y) continue;\r\n        target.add(boid.velocity);\r\n      }\r\n      target.div(neighboids.length);\r\n      target.sub(this.velocity);\r\n      target.mul(0.1);\r\n    }\r\n    return target;\r\n  }\r\n\r\n  cohesion(neighboids: Boid[]): Vector {\r\n    let target: Vector = new Vector(0,0);\r\n    if (neighboids.length > 0) {\r\n      for (const boid of neighboids) {\r\n        // if (this.position.x === boid.position.x && this.position.y === boid.position.y) continue;\r\n        target.add(boid.position);\r\n      }\r\n      target.div(neighboids.length);\r\n      target.sub(this.position);\r\n      target.mul(0.01);\r\n    }\r\n    return target;\r\n  }\r\n\r\n  separation(neighboids: Boid[]): Vector {\r\n    let target: Vector = new Vector(0,0);\r\n    if (neighboids.length > 0) {\r\n      for (const boid of neighboids) {\r\n        // if (this.position.x === boid.position.x && this.position.y === boid.position.y) continue;\r\n        const temp: Vector = new Vector(0,0);\r\n        temp.add(this.position);\r\n        temp.sub(boid.position);\r\n\r\n        const distance: number = this.position.getDistance(boid.position)\r\n        if (distance !== 0) temp.div(distance);\r\n\r\n        target.add(temp);\r\n      }\r\n      target.mul(0.5);\r\n    }\r\n    return target;\r\n  }\r\n\r\n  flock(boids: Boid[]): void {\r\n    this.acceleration = new Vector(0,0);\r\n    const neighboids: Boid[] = this.getNeighboids(boids, 100);\r\n    const personalSpace: Boid[] = this.getNeighboids(boids, 20);\r\n    \r\n    const alignment: Vector = this.alignment(neighboids);\r\n    this.acceleration.add(alignment);\r\n\r\n    const cohesion: Vector = this.cohesion(neighboids);\r\n    this.acceleration.add(cohesion);\r\n\r\n    const separation: Vector = this.separation(personalSpace);\r\n    this.acceleration.add(separation);\r\n    \r\n    if (this.label === 50) console.log(\"accel: \", this.acceleration.x, this.acceleration.y);\r\n    \r\n    this.velocity.add(this.acceleration);\r\n    this.velocity.limit(2);\r\n  }\r\n\r\n  update(): void {\r\n    this.position.add(this.velocity);\r\n    this.velocity.add(this.acceleration);\r\n  }\r\n  \r\n  wrap(width: number, height: number): void {\r\n    const offset = this.radius/2;\r\n\r\n    if (this.position.x < -offset) this.position.x = width+(offset-1);\r\n    if (this.position.x > width+5) this.position.x = -(offset-1);\r\n    if (this.position.y < -offset) this.position.y = height+(offset-1);\r\n    if (this.position.y > height+5) this.position.y = -(offset-1);\r\n  }\r\n\r\n  // bounce(width: number, height: number): void {\r\n  //   if (this.position.x <= 0 || this.position.x >= width) this.velocity.x *= -1;\r\n  //   if (this.position.y <= 0 || this.position.y >= height) this.velocity.y *= -1;\r\n  // }\r\n\r\n  draw(context: CanvasRenderingContext2D): void {\r\n    context.save();\r\n    context.translate(this.position.x, this.position.y);\r\n\r\n    context.fillStyle = colorA;\r\n    // context.strokeStyle = colorA;\r\n    // context.lineWidth = 1;\r\n\r\n    context.beginPath();\r\n    context.arc(0, 0, this.radius, 0, Math.PI*2);\r\n    context.fill();\r\n    // context.stroke();\r\n\r\n    context.restore();\r\n  }\r\n}\r\n\r\n// Helper functions\r\n\r\nexport default function initBoids(context: CanvasRenderingContext2D, width: number, height: number): void {\r\n  // Initialize\r\n  const boids: Boid[] = [];\r\n  const count = 150;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    boids.push(Boid.default(width, height, i));\r\n  }\r\n\r\n  const animate = () => {\r\n    // Canvas background\r\n    context.fillStyle = colorB;\r\n    context.fillRect(0, 0, width, height);\r\n\r\n    // Update agents\r\n\r\n    boids.forEach(boid => {\r\n      boid.flock(boids);\r\n      boid.update();\r\n      // boid.bounce(width, height);\r\n      boid.wrap(width, height);\r\n      boid.draw(context);\r\n    })\r\n\r\n    // Frame settings\r\n    const fps = 60;\r\n    const fpsInterval = 1000/fps;\r\n\r\n    setTimeout(() => {\r\n      window.requestAnimationFrame(animate);\r\n    }, fpsInterval);\r\n\r\n  }\r\n  animate();\r\n}","export function getRandomInt(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function degToRad(n: number): number {\r\n  return n * Math.PI / 180;\r\n}","import { colorA, colorB } from \"./script\";\r\nimport { getRandomInt } from \"./helper\";\r\n\r\n// Classes\r\nclass Vector {\r\n  constructor(\r\n    public x: number,\r\n    public y: number\r\n  ) {}\r\n\r\n  getDistance(other: Vector): number {\r\n    const dx = this.x - other.x;\r\n    const dy = this.y - other.y;\r\n    return Math.sqrt(dx*dx + dy*dy);\r\n  }\r\n}\r\n\r\nclass Agent {\r\n  constructor(\r\n    public position: Vector,\r\n    private velocity: Vector,\r\n    private radius: number,\r\n    private label: number,\r\n  ) {}\r\n\r\n  static default(width: number, height: number, radius?: number): Agent {\r\n    const vMax = 1;\r\n    if (radius == null) radius = 10;\r\n\r\n    const position = new Vector(getRandomInt(0, width), getRandomInt(0, height));\r\n    const velocity = new Vector(vMax*getRandomInt(-1,1), vMax*getRandomInt(-1,1));\r\n\r\n    return new Agent(position, velocity, radius, 0);\r\n  }\r\n\r\n  wrap(width: number, height: number): void {\r\n    if (this.position.x < -5) this.position.x = width+4;\r\n    if (this.position.x > width+5) this.position.x = -4;\r\n    if (this.position.y < -5) this.position.y = height+4;\r\n    if (this.position.y > height+5) this.position.y = -4;\r\n  }\r\n\r\n  update(): void {\r\n    this.position.x += this.velocity.x;\r\n    this.position.y += this.velocity.y;\r\n  }\r\n\r\n  draw(context: CanvasRenderingContext2D): void {\r\n    context.save();\r\n    context.translate(this.position.x, this.position.y);\r\n\r\n    context.fillStyle = colorB;\r\n    context.strokeStyle = colorA;\r\n    context.lineWidth = 1;\r\n\r\n    context.beginPath();\r\n    context.arc(0, 0, this.radius, 0, Math.PI*2);\r\n    context.fill();\r\n    context.stroke();\r\n\r\n    context.restore();\r\n  }\r\n}\r\n\r\n// Helper functions\r\n\r\nfunction mapRange(value: number, inputMin: number, inputMax: number, outputMin: number, outputMax: number, clamp?: boolean): number {\r\n  // Reference:\r\n  // https://github.com/mattdesl/canvas-sketch-util/blob/master/math.js\r\n  // https://openframeworks.cc/documentation/math/ofMath/\r\n  if (Math.abs(inputMin - inputMax) < Number.EPSILON) {\r\n    return outputMin;\r\n  } else {\r\n    var outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);\r\n    if (clamp) {\r\n      if (outputMax < outputMin) {\r\n        if (outVal < outputMax) outVal = outputMax;\r\n        else if (outVal > outputMin) outVal = outputMin;\r\n      } else {\r\n        if (outVal > outputMax) outVal = outputMax;\r\n        else if (outVal < outputMin) outVal = outputMin;\r\n      }\r\n    }\r\n    return outVal;\r\n  }\r\n}\r\n\r\n// Main\r\nexport default function initNodes(context: CanvasRenderingContext2D, width: number, height: number): void {\r\n  // console.log(\"nodes.ts\");\r\n  const agents: Agent[] = [];\r\n  const radius = 8;\r\n  const count = 50;\r\n  const connectDistance = 75;\r\n  const maxThickness = 10;\r\n  const minThickness = 0.1;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    // Initialize\r\n    agents.push(Agent.default(width, height, radius))\r\n  }\r\n\r\n  const animate = () => {\r\n    // Canvas background\r\n    context.fillStyle = colorB;\r\n    context.fillRect(0, 0, width, height);\r\n\r\n    // Update agents\r\n    for (let i = 0; i < agents.length; i++) {\r\n      const agent = agents[i];\r\n\r\n      for (let j = i+1; j < agents.length; j++) {\r\n        const other = agents[j];\r\n\r\n        // context.beginPath();\r\n        // context.moveTo(agent.position.x, agent.position.y);\r\n        // context.lineTo(other.position.x, other.position.y);\r\n        // context.stroke();\r\n        \r\n        const distance = agent.position.getDistance(other.position);\r\n\r\n        if (distance < connectDistance) {\r\n          context.lineWidth = mapRange(distance, 0, connectDistance, maxThickness, minThickness);\r\n\r\n          context.beginPath();\r\n          context.strokeStyle = colorA;\r\n          context.moveTo(agent.position.x, agent.position.y);\r\n          context.lineTo(other.position.x, other.position.y);\r\n          context.stroke();\r\n        }\r\n      }\r\n    }\r\n\r\n    agents.forEach(agent => {\r\n      agent.update();\r\n      agent.draw(context);\r\n      // agent.bounce(width,height);\r\n      agent.wrap(width,height);\r\n    });\r\n\r\n    // Frame settings\r\n    const fps = 60;\r\n    const fpsInterval = 1000/fps;\r\n\r\n    setTimeout(() => {\r\n      window.requestAnimationFrame(animate);\r\n    }, fpsInterval);\r\n  };\r\n\r\n  animate();\r\n}","// Initialize Canvases\r\nimport initArcs from \"./arcs\";\r\nimport initNodes from \"./nodes\";\r\nimport initBoids from \"./boids\";\r\nexport { colorA, colorB };\r\n\r\n// function\r\n\r\nconst colorA = getComputedStyle(document.body).getPropertyValue('--foreground-color');\r\nconst colorB = getComputedStyle(document.body).getPropertyValue('--background-color');\r\n\r\nfunction init() {\r\n  \r\n  let canvas1 = document.getElementById(\"canvas1\") as HTMLCanvasElement;\r\n  let context1 = canvas1.getContext('2d') as CanvasRenderingContext2D;\r\n  const width = canvas1.width;\r\n  const height = canvas1.height;\r\n  // console.log(\"nodes call\");\r\n  initNodes(context1, width, height);\r\n  \r\n  let canvas2 = document.getElementById(\"canvas2\") as HTMLCanvasElement;\r\n  let context2 = canvas2.getContext('2d') as CanvasRenderingContext2D;\r\n  // console.log(\"arcs call\");\r\n  initArcs(context2, width, height);\r\n\r\n  let canvas3 = document.getElementById(\"canvas3\") as HTMLCanvasElement;\r\n  let context3 = canvas3.getContext('2d') as CanvasRenderingContext2D;\r\n  // console.log(\"boids call\");\r\n  initBoids(context3, width, height);\r\n}\r\n\r\ninit();\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(659);\n"],"names":["Vector","constructor","x","y","Segment","position","speed","angle","width","height","label","update","center","radius","this","draw","context","fillStyle","colorA","save","translate","rotate","beginPath","rect","fill","restore","getPosition","Math","sin","cos","segments1","segments2","h","segments","direction","i","degToRad","wScaled","w","velocity","push","generateSegments","animate","colorB","fillRect","forEach","segment","setTimeout","window","requestAnimationFrame","add","vec","sub","mul","k","div","limit","max","getDistance","other","dx","dy","sqrt","Boid","acceleration","getRandomInt","getNeighboids","boids","neighboids","boid","checkVisible","distance","tooClose","alignment","target","length","cohesion","separation","temp","flock","personalSpace","console","log","wrap","offset","arc","PI","default","min","random","n","Agent","strokeStyle","lineWidth","stroke","mapRange","value","inputMin","inputMax","outputMin","outputMax","clamp","abs","Number","EPSILON","outVal","agents","agent","j","moveTo","lineTo","getComputedStyle","document","body","getPropertyValue","canvas1","getElementById","context1","getContext","context2","context3","init","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}